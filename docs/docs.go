// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "schemes": [{{ range .Schemes }} "{{ . }}",{{ end }}],
    "paths": {
        "/api/login-user": {
            "post": {
                "tags": ["Auth"],
                "summary": "User login",
                "description": "Authenticates a user and returns a JWT token if the login is successful.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "login",
                        "in": "body",
                        "description": "Login credentials",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access_token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or missing fields"
                    },
                    "401": {
                        "description": "Invalid credentials"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": ["Auth"],
                "summary": "Logout user",
                "description": "Logs out the user by deleting the JWT token from the database.",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": ["text/plain"],
                "responses": {
                    "200": {
                        "description": "Logged out successfully"
                    },
                    "401": {
                        "description": "Authorization header missing or invalid token"
                    },
                    "500": {
                        "description": "Failed to logout"
                    }
                }
            }
        },
        "/api/register-user": {
            "post": {
                "tags": ["Auth"],
                "summary": "Register a new user",
                "description": "Registers a new user with a username and password. The password is hashed before saving.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "User data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Username and password are required or Invalid request payload"
                    },
                    "409": {
                        "description": "Username already exists"
                    },
                    "500": {
                        "description": "Failed to register user or Error checking username"
                    }
                }
            }
        },
        "/api/get-data": {
            "get": {
                "tags": ["Scraping"],
                "summary": "Download scraped data as a ZIP file",
                "description": "Retrieves all scraped data from the 'scraping_folder' and provides it as a downloadable ZIP file.",
                "produces": ["application/zip"],
                "responses": {
                    "200": {
                        "description": "ZIP file containing scraped data",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "405": {
                        "description": "Invalid request method"
                    },
                    "500": {
                        "description": "Failed to zip folder"
                    }
                }
            }
        },
        "/api/crawl": {
            "post": {
                "tags": ["Crawling"],
                "summary": "Starts a web crawl process",
                "description": "Initiates a web scraping process by accepting a list of URLs.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "List of URLs to crawl",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/URLDatastruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Crawling completed"
                    },
                    "400": {
                        "description": "Invalid request payload"
                    },
                    "405": {
                        "description": "Invalid request method"
                    }
                }
            }
        },
        "/api/delete-data": {
            "delete": {
                "tags": ["Data"],
                "summary": "Deletes all scraped data",
                "description": "Deletes all files in the scraping folder where the scraped data is stored.",
                "produces": ["text/plain"],
                "responses": {
                    "200": {
                        "description": "All files deleted successfully"
                    },
                    "405": {
                        "description": "Invalid request method"
                    },
                    "500": {
                        "description": "Unable to read directory or delete file"
                    }
                }
            }
        }
    },
    "definitions": {
        "LoginRequest": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "URLDatastruct": {
            "type": "object",
            "properties": {
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Web Scraper API",
	Description:      "This is the API documentation for the Web Scraper application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
